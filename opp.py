# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17QD7WFd2eUG9wz06sF5PyvSamHapgv3C
"""

import streamlit as st
import pandas as pd
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# Define a function to load and process the data from an Excel file
def process_data(file):
    # Read the Excel file and load the specific sheet (assuming the sheet is named 'creditcard')
    transactions = pd.read_excel(file, sheet_name='creditcard')

    # Convert non-numeric columns to numeric
    non_numeric_cols = ['V2', 'V7', 'V9', 'V24']
    for col in non_numeric_cols:
        transactions[col] = pd.to_numeric(transactions[col], errors='coerce')

    # Handle missing values (simplistic approach)
    transactions.fillna(transactions.mean(), inplace=True)

    # Feature scaling
    scaler = StandardScaler()
    scaled_features = scaler.fit_transform(transactions[['Amount', 'Time']])

    # Apply Isolation Forest
    model = IsolationForest(contamination=0.001)
    predictions = model.fit_predict(scaled_features)

    # Add predictions to dataframe
    transactions['Anomaly'] = predictions
    transactions['Anomaly'] = transactions['Anomaly'].map({1: 'Normal', -1: 'Fraudulent'})

    return transactions

# Streamlit UI
st.title('Credit Card Fraud Detection')

# Allow Excel file uploads
uploaded_file = st.file_uploader("Upload an Excel file", type="xlsx")

if uploaded_file is not None:
    df = process_data(uploaded_file)
    st.write("Data with Anomalies:")
    st.dataframe(df.head())

    # Plot the distribution of anomalies
    st.subheader("Distribution of Anomalies")
    fig, ax = plt.subplots()
    sns.countplot(data=df, x='Anomaly', ax=ax)
    st.pyplot(fig)

    # Download link for the processed data
    st.write("Download the processed file:")
    st.download_button(
        label="Download CSV",
        data=df.to_csv(index=False).encode('utf-8'),
        file_name='processed_transactions.csv',
        mime='text/csv'
    )

